{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "7e6e5a17-f6c5-4e4a-9b73-aa1cf70b4ebc",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "class NumPyWrapper:\n",
    "    def __init__(self):\n",
    "        pass  # Initialization is empty for now\n",
    "\n",
    "    # Array Creation\n",
    "    def create_array(self, data):\n",
    "        \"\"\"Creates a NumPy array from a list or tuple.\"\"\"\n",
    "        return np.array(data)\n",
    "\n",
    "    def create_zeros(self, shape):\n",
    "        \"\"\"Creates an array filled with zeros of the specified shape.\"\"\"\n",
    "        return np.zeros(shape)\n",
    "\n",
    "    def create_ones(self, shape):\n",
    "        \"\"\"Creates an array filled with ones of the specified shape.\"\"\"\n",
    "        return np.ones(shape)\n",
    "\n",
    "    def create_arange(self, start, stop, step=1):\n",
    "        \"\"\"Creates an array with values from start to stop (exclusive) with the given step.\"\"\"\n",
    "        return np.arange(start, stop, step)\n",
    "\n",
    "    # Array Manipulation\n",
    "    def reshape(self, array, new_shape):\n",
    "        \"\"\"Reshapes the array to the new shape.\"\"\"\n",
    "        return np.reshape(array, new_shape)\n",
    "\n",
    "    def transpose(self, array):\n",
    "        \"\"\"Returns the transpose of the array.\"\"\"\n",
    "        return np.transpose(array)\n",
    "\n",
    "    def flatten(self, array):\n",
    "        \"\"\"Flattens the array into a 1D array.\"\"\"\n",
    "        return np.flatten(array)\n",
    "\n",
    "    # Statistical Functions\n",
    "    def sum(self, array):\n",
    "        \"\"\"Calculates the sum of all elements in the array.\"\"\"\n",
    "        return np.sum(array)\n",
    "\n",
    "    def mean(self, array):\n",
    "        \"\"\"Calculates the mean of all elements in the array.\"\"\"\n",
    "        return np.mean(array)\n",
    "\n",
    "    def median(self, array):\n",
    "        \"\"\"Calculates the median of all elements in the array.\"\"\"\n",
    "        return np.median(array)\n",
    "\n",
    "    def std(self, array):\n",
    "        \"\"\"Calculates the standard deviation of all elements in the array.\"\"\"\n",
    "        return np.std(array)\n",
    "\n",
    "    def variance(self, array):\n",
    "        \"\"\"Calculates the variance of all elements in the array.\"\"\"\n",
    "        return np.var(array)\n",
    "\n",
    "    # Matrix Operations\n",
    "    def dot_product(self, array1, array2):\n",
    "        \"\"\"Calculates the dot product of two arrays.\"\"\"\n",
    "        return np.dot(array1, array2)\n",
    "\n",
    "    def matrix_multiplication(self, array1, array2):\n",
    "        \"\"\"Performs matrix multiplication of two arrays.\"\"\"\n",
    "        return np.matmul(array1, array2)\n",
    "\n",
    "    def inverse(self, matrix):\n",
    "        \"\"\"Calculates the inverse of a square matrix.\"\"\"\n",
    "        return np.linalg.inv(matrix)\n",
    "\n",
    "    def determinant(self, matrix):\n",
    "        \"\"\"Calculates the determinant of a square matrix.\"\"\"\n",
    "        return np.linalg.det(matrix)\n",
    "\n",
    "    # Array Comparison and Selection\n",
    "    def maximum(self, array1, array2):\n",
    "        \"\"\"Returns the element-wise maximum of two arrays.\"\"\"\n",
    "        return np.maximum(array1, array2)\n",
    "\n",
    "    def minimum(self, array1, array2):\n",
    "        \"\"\"Returns the element-wise minimum of two arrays.\"\"\"\n",
    "        return np.minimum(array1, array2)\n",
    "\n",
    "    def where(self, condition, x, y):\n",
    "        \"\"\"Returns elements chosen from x or y depending on the condition.\"\"\"\n",
    "        return np.where(condition, x, y)\n",
    "\n",
    "    # Other Operations\n",
    "    def random(self, shape):\n",
    "        \"\"\"Generates a random array of the specified shape.\"\"\"\n",
    "        return np.random.rand(*shape)\n",
    "\n",
    "    def sort(self, array):\n",
    "        \"\"\"Sorts the elements of the array in ascending order.\"\"\"\n",
    "        return np.sort(array)\n",
    "\n",
    "    def unique(self, array):\n",
    "        \"\"\"Returns the unique elements of the array.\"\"\"\n",
    "        return np.unique(array)\n",
    "\n",
    "    def concatenate(self, arrays):\n",
    "        \"\"\"Concatenates multiple arrays along a given axis.\"\"\"\n",
    "        return np.concatenate(arrays)\n",
    "\n",
    "    def split(self, array, indices_or_sections):\n",
    "        \"\"\"Splits the array into sub-arrays.\"\"\"\n",
    "        return np.split(array, indices_or_sections)\n",
    "\n",
    "    # Utility Methods\n",
    "    def is_array(self, object):\n",
    "        \"\"\"Checks if an object is a NumPy array.\"\"\"\n",
    "        return isinstance(object, np.ndarray)\n",
    "\n",
    "    def shape(self, array):\n",
    "        \"\"\"Returns the shape of the array.\"\"\"\n",
    "        return np.shape(array)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "6b0a2493-49d7-43ed-a193-638ba74334ff",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "class NumPyWrapper:\n",
    "    def __init__(self):\n",
    "        pass\n",
    "\n",
    "    # ... (previous methods) ...\n",
    "\n",
    "    # Array Generation\n",
    "    def create_linspace(self, start, stop, num):\n",
    "        \"\"\"Creates an array of evenly spaced values within a given interval.\"\"\"\n",
    "        return np.linspace(start, stop, num)\n",
    "\n",
    "    def create_logspace(self, start, stop, num):\n",
    "        \"\"\"Creates an array of logarithmically spaced values within a given interval.\"\"\"\n",
    "        return np.logspace(start, stop, num)\n",
    "\n",
    "    # Advanced Array Manipulation\n",
    "    def resize(self, array, new_shape):\n",
    "        \"\"\"Resizes the array to the new shape, potentially adding or removing elements.\"\"\"\n",
    "        return np.resize(array, new_shape)\n",
    "\n",
    "    def append(self, array, values):\n",
    "        \"\"\"Appends values to the end of an array.\"\"\"\n",
    "        return np.append(array, values)\n",
    "\n",
    "    def insert(self, array, index, values):\n",
    "        \"\"\"Inserts values into the array at a specific index.\"\"\"\n",
    "        return np.insert(array, index, values)\n",
    "\n",
    "    def delete(self, array, index):\n",
    "        \"\"\"Deletes elements from an array at a specified index.\"\"\"\n",
    "        return np.delete(array, index)\n",
    "\n",
    "    # Mathematical Operations\n",
    "    def power(self, array, exponent):\n",
    "        \"\"\"Raises each element of the array to the specified exponent.\"\"\"\n",
    "        return np.power(array, exponent)\n",
    "\n",
    "    def log(self, array, base=None):\n",
    "        \"\"\"Calculates the logarithm of each element in the array.\"\"\"\n",
    "        return np.log(array, base)\n",
    "\n",
    "    def sin(self, array):\n",
    "        \"\"\"Calculates the sine of each element in the array.\"\"\"\n",
    "        return np.sin(array)\n",
    "\n",
    "    def cos(self, array):\n",
    "        \"\"\"Calculates the cosine of each element in the array.\"\"\"\n",
    "        return np.cos(array)\n",
    "\n",
    "    def tan(self, array):\n",
    "        \"\"\"Calculates the tangent of each element in the array.\"\"\"\n",
    "        return np.tan(array)\n",
    "\n",
    "    # Broadcasting\n",
    "    def broadcast_arrays(self, *arrays):\n",
    "        \"\"\"Broadcasts arrays to a common shape for element-wise operations.\"\"\"\n",
    "        return np.broadcast_arrays(*arrays)\n",
    "\n",
    "    # Array Filtering and Selection\n",
    "    def extract_elements(self, array, condition):\n",
    "        \"\"\"Extracts elements from an array based on a boolean condition.\"\"\"\n",
    "        return array[condition]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5fc99d25-73a0-4545-905b-7b4f98ebcc8e",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
